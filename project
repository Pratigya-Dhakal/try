#include <TinyGPS++.h>
#include <SoftwareSerial.h>
SoftwareSerial serial_gps(3, 2); // RX = pin 10, TX = pin 11
SoftwareSerial mySerial(5, 4);
TinyGPSPlus gps;
double latitude, longitude;<br>int z,counterCommand;
boolean found = false;
boolean autoReset = false;<br>void setup() {
  Serial.begin(9600);
  serial_gps.begin(9600);#include <TinyGPS++.h>
#include <SoftwareSerial.h>
/*
   This sample code demonstrates the normal use of a TinyGPS++ (TinyGPSPlus) object.
   It requires the use of SoftwareSerial, and assumes that you have a
   4800-baud serial GPS device hooked up on pins 4(rx) and 3(tx).
*/
static const int RXPin = 4, TXPin = 3;
static const uint32_t GPSBaud = 4800;

// The TinyGPS++ object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

void setup()
{
  Serial.begin(115200);
  ss.begin(GPSBaud);

  Serial.println(F("FullExample.ino"));
  Serial.println(F("An extensive example of many interesting TinyGPS++ features"));
  Serial.print(F("Testing TinyGPS++ library v. ")); Serial.println(TinyGPSPlus::libraryVersion());
  Serial.println(F("by Mikal Hart"));
  Serial.println();
  Serial.println(F("Sats HDOP  Latitude   Longitude   Fix  Date       Time     Date Alt    Course Speed Card  Distance Course Card  Chars Sentences Checksum"));
  Serial.println(F("           (deg)      (deg)       Age                      Age  (m)    --- from GPS ----  ---- to London  ----  RX    RX        Fail"));
  Serial.println(F("----------------------------------------------------------------------------------------------------------------------------------------"));
}

void loop()
{
  static const double LONDON_LAT = 51.508131, LONDON_LON = -0.128002;

  printInt(gps.satellites.value(), gps.satellites.isValid(), 5);
  printFloat(gps.hdop.hdop(), gps.hdop.isValid(), 6, 1);
  printFloat(gps.location.lat(), gps.location.isValid(), 11, 6);
  printFloat(gps.location.lng(), gps.location.isValid(), 12, 6);
  printInt(gps.location.age(), gps.location.isValid(), 5);
  printDateTime(gps.date, gps.time);
  printFloat(gps.altitude.meters(), gps.altitude.isValid(), 7, 2);
  printFloat(gps.course.deg(), gps.course.isValid(), 7, 2);
  printFloat(gps.speed.kmph(), gps.speed.isValid(), 6, 2);
  printStr(gps.course.isValid() ? TinyGPSPlus::cardinal(gps.course.deg()) : "*** ", 6);

  unsigned long distanceKmToLondon =
    (unsigned long)TinyGPSPlus::distanceBetween(
      gps.location.lat(),
      gps.location.lng(),
      LONDON_LAT, 
      LONDON_LON) / 1000;
  printInt(distanceKmToLondon, gps.location.isValid(), 9);

  double courseToLondon =
    TinyGPSPlus::courseTo(
      gps.location.lat(),
      gps.location.lng(),
      LONDON_LAT, 
      LONDON_LON);

  printFloat(courseToLondon, gps.location.isValid(), 7, 2);

  const char *cardinalToLondon = TinyGPSPlus::cardinal(courseToLondon);

  printStr(gps.location.isValid() ? cardinalToLondon : "*** ", 6);

  printInt(gps.charsProcessed(), true, 6);
  printInt(gps.sentencesWithFix(), true, 10);
  printInt(gps.failedChecksum(), true, 9);
  Serial.println();
  
  smartDelay(1000);

  if (millis() > 5000 && gps.charsProcessed() < 10)
    Serial.println(F("No GPS data received: check wiring"));
}

// This custom version of delay() ensures that the gps object
// is being "fed".
static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);
}

static void printFloat(float val, bool valid, int len, int prec)
{
  if (!valid)
  {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  }
  else
  {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1); // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3 : vi >= 10 ? 2 : 1;
    for (int i=flen; i<len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}

static void printInt(unsigned long val, bool valid, int len)
{
  char sz[32] = "*****************";
  if (valid)
    sprintf(sz, "%ld", val);
  sz[len] = 0;
  for (int i=strlen(sz); i<len; ++i)
    sz[i] = ' ';
  if (len > 0) 
    sz[len-1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t)
{
  if (!d.isValid())
  {
    Serial.print(F("********** "));
  }
  else
  {
    char sz[32];
    sprintf(sz, "%02d/%02d/%02d ", d.month(), d.day(), d.year());
    Serial.print(sz);
  }
  
  if (!t.isValid())
  {
    Serial.print(F("******** "));
  }
  else
  {
    char sz[32];
    sprintf(sz, "%02d:%02d:%02d ", t.hour(), t.minute(), t.second());
    Serial.print(sz);
  }

  printInt(d.age(), d.isValid(), 5);
  smartDelay(0);
}

static void printStr(const char *str, int len)
{
  int slen = strlen(str);
  for (int i=0; i<len; ++i)
    Serial.print(i<slen ? str[i] : ' ');
  smartDelay(0);
}
  mySerial.begin(9600);
  Serial.println("GPS Mulai");
  //## order of AT-Command to remove when tool is first turned on ##//
  mySerial.listen();
  while(counterCommand<=3)// meaning that if the order at command is less than 3 then do below
  {
    switch(counterCommand)
    {
      case 0: atCommand("AT",1,"OK");break; // order at command 1: test micro communication with SIM
      case 1: atCommand("AT+CMGF=1",1,"OK");break;// order 2: setting SIM800 with mode text
      case 2: atCommand("AT+CMGL="ALL",0",2,"OK");break;//3: read all saved messages without changing the status. 
                                                          // the intent of the status is if the sms has not been read then it will not be changed to<br>                                                          // readable if using this at command 
      case 3: atCommand("AT+CMGD=1,4",1,"OK");break;  // delete the entire contents of the sms on the card (just in case when the sms operatore)<br>    }
  }
//##############################
  counterCommand = 0;// the order is made 0 to do the program that is in the loop<br>}<br>void loop() {
  serial_gps.listen();
  while(serial_gps.available()) {
    gps.encode(serial_gps.read());
  }
  if(gps.location.isUpdated()) {
    latitude = gps.location.lat();
    longitude = gps.location.lng();
    String valLat = String(latitude);
    String valLong = String(longitude);
    String link = "http://www.google.com/maps/place/" + String(latitude) + "," + String(longitude) ;
    Serial.print("Link Google Maps : ");
    Serial.println(link);
    Serial.print("Satellite Count : ");
    Serial.println(gps.satellites.value());
    Serial.print("Latitude : ");
    Serial.println(latitude, 6);
    Serial.print("Longitude : ");
    Serial.println(longitude, 6);
    Serial.print("Speed MPH : ");
    Serial.println(gps.speed.mph());
    Serial.print("Altitude Feet : ");
    Serial.println(gps.altitude.feet());
    Serial.println("");
    mySerial.listen();
    atCommand("AT+CMGF=1",1,"OK");
    atCommand("AT+CMGS="+6281553718364"",1,">");
    atCommand("Latitude:""+valLat+"",Longitude""+valLong+""",1,">");
    Serial.println("Mengirim Char Ctrl+Z / ESC untuk keluar dari menu SMS");
    mySerial.write((char)26);
    delay(10000);
  }
  //delay(10000);
}
void atCommand(String iCommand, int timing, char myText[])
{
  String onOff = String(myText);
  Serial.println("###Start###");
  Serial.print("Command Ke ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ");
  Serial.print(counterCommand);
  Serial.print("   Kirim=>");Serial.println(iCommand);
  while(timing>z)
  {
    mySerial.println(iCommand);
    if(mySerial.find(myText))
    {
      found = true;
      break;
    }
    Serial.print(z);Serial.print(",");
    z++;
  }
  if(found == true)
  {
    autoReset = false;
    
    counterCommand++;
    Serial.println("==============================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> oke");
  }
  else
  {
    
      mySerial.write("AT+CMGF=1");
      delay(1000);
      mySerial.write("AT+CMGD=1,4");
      delay(1000);
      Serial.print("nautoReset=truen");
      autoReset = true;
      Serial.println("--------============>>>>>>>> AT Command Error");
      Serial.println("--------============>>>>>>>> Proses reset");
      //digitalWrite(resetPin, HIGH);
      //delay(200);
      //digitalWrite(resetPin, LOW);
      //delay(15000);
      counterCommand = 0;
    
  }
  if(counterCommand >=100)
  {
    counterCommand = 0;
  }
  found = false;
  z=0;
 Serial.println("***end***");
  
}
